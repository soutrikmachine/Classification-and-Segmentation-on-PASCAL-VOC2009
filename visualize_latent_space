import keras
import numpy as np
from keras.models import Model

model = keras.models.load_model('../model/convolutional_autoencoder.h5')
input = model.input
encoder = model(input,__)
x_encoded = encoder.predict(__)

x_encoded_flatten = (x_encoded.reshape(len(x_encoded),-1).T).T 

#Visualization with t-SNE 
#for t-SNE documentation visit "https://lvdmaaten.github.io/tsne/"

from sklearn.manifold import TSNE 
import pylab

x_encoded_embedded = TSNE(n_components=2, perplexity=25, learning_rate=400).fit_transform(x_encoded_flatten)
pylab.scatter(x_encoded_embedded[:, 0], x_encoded_embedded[:, 1], 20, Y_val) 
pylab.show()

#Visualization with UMAP
# for UMAP documentation visit "https://umap-learn.readthedocs.io/en/latest/"

import umap
import sklearn.cluster as cluster
from sklearn.metrics import adjusted_rand_score, adjusted_mutual_info_score 

standard_embed_embedding = umap.UMAP(random_state=42).fit_transform(x_encoded_flatten)
plt.scatter(standard_embed_embedding[:, 0], standard_embed_embedding[:, 1], c= Y_val, s=0.1, cmap='Spectral')


